apiVersion: v1
kind: BuildConfig
metadata:
  labels:
    app: cicd-pipeline
    name: cicd-pipeline
  name: tasks-pipeline
spec:
  runPolicy: Serial
  source:
    type: None
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
          node('maven') {
              // define commands
              def ocCmd = "oc --token=`cat /var/run/secrets/kubernetes.io/serviceaccount/token` --server=https://openshift.default.svc.cluster.local --certificate-authority=/run/secrets/kubernetes.io/serviceaccount/ca.crt"
              def mvnCmd = "mvn -s configuration/cicd-settings.xml"

              stage 'Build'
              git branch: 'eap-7', url: 'http://gogs:3000/ages/tasks.git'
              def v = version()
              sh "${mvnCmd} clean install -DskipTests=true"

              stage 'Test and Analysis'
              parallel (
                  'Test': {
                      sh "${mvnCmd} test"
                      step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                  },
                  'Static Analysis': {
                      sh "${mvnCmd} jacoco:report sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                  }
              )

              stage 'Push to Nexus'
              sh "${mvnCmd} deploy -DskipTests=true"

              stage 'Deploy DEV'
              sh "rm -rf oc-build && mkdir -p oc-build/deployments"
              sh "cp target/openshift-tasks.war oc-build/deployments/ROOT.war"
              // clean up. keep the image stream
              sh "${ocCmd} delete bc,dc,svc,route -l app=tasks -n tasks-dev"
              // create build. override the exit code since it complains about exising imagestream
                  sh "${ocCmd} new-build --name=tasks --image-stream=jboss-eap70-openshift:1.7 --binary=true --labels=app=tasks -n tasks-dev || true"
              // build image
              sh "${ocCmd} start-build tasks --from-dir=oc-build --wait=true -n tasks-dev"
              // deploy image
              sh "${ocCmd} new-app tasks:latest -n tasks-dev"
              sh "${ocCmd} expose svc/tasks -n tasks-dev"

              stage 'Deploy STAGE'
              input message: "Promote to STAGE?", ok: "Promote"
              // tag for stage
              sh "${ocCmd} tag tasks-dev/tasks:latest tasks-stage/tasks:${v}"
              // clean up. keep the imagestream
              sh "${ocCmd} delete bc,dc,svc,route -l app=tasks -n tasks-stage"
              // deploy stage image
              sh "${ocCmd} new-app tasks:${v} -n tasks-stage"
              sh "${ocCmd} expose svc/tasks -n tasks-stage"
          }

          def version() {
          def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
          matcher ? matcher[0][1] : null
          }
    type: JenkinsPipeline
    type: Generic
